---
swagger: "2.0"
info:
  description: "This is an Exercise server.  You can find \nout more about Swagger\
    \ at \n[http://swagger.io](http://swagger.io) or on \n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n"
  version: "1.0.1"
  title: "Swagger Exercise"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8081"
basePath: "/api"
tags: []
schemes:
- "http"
- "https"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
# PARAMETERS
parameters:
  # PATH
  userId:
    in: "path"
    name: "userId"
    required: true
    type: "integer"
    format: "int64"
    description: "User identifier"
  weightingId:
    in: "path"
    name: "weightingId"
    required: true
    type: "integer"
    format: "int64"
    description: "Weighting identifier"
  routineId:
    in: "path"
    name: "routineId"
    required: true
    type: "integer"
    format: "int64"
    description: "Routine identifier"
  cycleId:
    in: "path"
    name: "cycleId"
    required: true
    type: "integer"
    format: "int64"
    description: "Cycle identifier"
  exerciseId:
    in: "path"
    name: "exerciseId"
    required: true
    type: "integer"
    format: "int64"
    description: "Exercise identifier"
  imageId:
    in: "path"
    name: "imageId"
    required: true
    type: "integer"
    format: "int64"
    description: "Image identifier"
  videoId:
    in: "path"
    name: "videoId"
    required: true
    type: "integer"
    format: "int64"
    description: "Video identifier"
  categoryId:
    in: "path"
    name: "categoryId"
    required: true
    type: "integer"
    format: "int64"
    description: "Category identifier"
  sportId:
    in: "path"
    name: "sportId"
    required: true
    type: "integer"
    format: "int64"
    description: "Sport identifier"
  difficulty:
    in: "query"
    name: "difficulty"
    required: false
    type: "string"
    enum:
      - "rookie"
      - "beginner"
      - "intermediate"
      - "advanced"
      - "expert"
    description: "Difficulty level"
  page:
    in: "query"
    name: "page"
    required: false
    type: "integer"
    minimum: 0
    default: 0
    description: "Page number"
  size:
    in: "query"
    name: "size"
    required: false
    type: "integer"
    minimum: 1
    default: 10
    description: "Items per page"
  direction:
    in: "query"
    name: "direction"
    required: false
    type: "string"
    enum: [ "asc", "desc" ]
    default: "asc"
    description: "Order direction"
  weightingOrderBy:
    in: "query"
    name: "orderBy"
    required: false
    type: "string"
    enum: [ "id" , "date", "weight", "height" ]
    default: "date"
    description: "Order by"
  routineOrderBy:
    in: "query"
    name: "orderBy"
    required: false
    type: "string"
    enum: [ "id" , "name", "detail", "dateCreated", "averageRating", "difficulty", "categoryId", "creatorId" ]
    default: "dateCreated"
    description: "Order by"
  cycleOrderBy:
    in: "query"
    name: "orderBy"
    required: false
    type: "string"
    enum: [ "id" , "name", "detail", "type", "order", "repetitions" ]
    default: "id"
    description: "Order by"
  exerciseOrderBy:
    in: "query"
    name: "orderBy"
    required: false
    type: "string"
    enum: [ "id" , "name", "detail", "type", "repetitions", "duration" ]
    default: "id"
    description: "Order by"
  imageOrderBy:
    in: "query"
    name: "orderBy"
    required: false
    type: "string"
    enum: [ "id" , "number", "url" ]
    default: "number"
    description: "Order by"
  videoOrderBy:
    in: "query"
    name: "orderBy"
    required: false
    type: "string"
    enum: [ "id" , "number", "url" ]
    default: "number"
    description: "Order by"
  executionOrderBy:
    in: "query"
    name: "orderBy"
    required: false
    type: "string"
    enum: [ "id" , "date", "duration", "wasModified" ]
    default: "date"
    description: "Order by"
  ratingOrderBy:
    in: "query"
    name: "orderBy"
    required: false
    type: "string"
    enum: [ "id" , "date", "score" ]
    default: "date"
    description: "Order by"
  categoryOrderBy:
    in: "query"
    name: "orderBy"
    required: false
    type: "string"
    enum: [ "id" , "name", "detail" ]
    default: "name"
    description: "Order by"
  sportOrderBy:
    in: "query"
    name: "orderBy"
    required: false
    type: "string"
    enum: [ "id" , "name", "detail" ]
    default: "name"
    description: "Order by"
  # BODY
  user:
    in: "body"
    name: "body"
    description: "User information"
    required: true
    schema:
      $ref: "#/definitions/User"
  weighting:
    in: "body"
    name: "body"
    description: "Weighting information"
    required: true
    schema:
      $ref: "#/definitions/Weighting"
  routine:
    in: "body"
    name: "body"
    description: "Routine information"
    required: true
    schema:
      $ref: "#/definitions/Routine"
  cycle:
    in: "body"
    name: "body"
    description: "Cycle information"
    required: true
    schema:
      $ref: "#/definitions/Cycle"
  exercise:
    in: "body"
    name: "body"
    description: "Exercise information"
    required: true
    schema:
      $ref: "#/definitions/Exercise"
  image:
    in: "body"
    name: "body"
    description: "Image information"
    required: true
    schema:
      $ref: "#/definitions/Image"
  video:
    in: "body"
    name: "body"
    description: "Video information"
    required: true
    schema:
      $ref: "#/definitions/Video"
  category:
    in: "body"
    name: "body"
    description: "Category information"
    required: true
    schema:
      $ref: "#/definitions/Category"
  sport:
    in: "body"
    name: "body"
    description: "Sport information"
    required: true
    schema:
      $ref: "#/definitions/Sport"
  execution:
    in: "body"
    name: "body"
    description: "Execution information"
    required: true
    schema:
      $ref: "#/definitions/Execution"
  rating:
    in: "body"
    name: "body"
    description: "Rating information"
    required: true
    schema:
      $ref: "#/definitions/Rating"
paths:
# USERS
  /user:
    post:
      security: []
      tags:
      - "users"
      summary: "Create user"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User to create"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/FullUser"
        "400":
          $ref: '#/responses/BadRequest'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "User"
  /user/resend_verification:
    post:
      security: []
      tags:
      - "users"
      summary: "Resend user verification email"
      operationId: "resendUserVerificationEmail"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Email resend"
        required: true
        schema:
          $ref: "#/definitions/EmailResend"
      responses:
        "200":
          description: "OK"
      x-swagger-router-controller: "User"
  /user/verify_email:
    post:
      security: []
      tags:
      - "users"
      summary: "Verify user email"
      operationId: "verifyUserEmail"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Email confirmation"
        required: true
        schema:
          $ref: "#/definitions/EmailConfirmation"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "User"
  /user/login:
    post:
      security: []
      tags:
      - "users"
      summary: "Log user in"
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User credentials"
        required: true
        schema:
          $ref: "#/definitions/Credentials"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AuthenticationToken"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "User"
  /user/logout:
    post:
      security:
      - bearerAuth: []
      tags:
      - "users"
      summary: "Log user out"
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "User"
  /user/{userId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve other user"
      operationId: "getUserById"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/userId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullUser"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "User"
  /user/current:
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve current user"
      operationId: "getLoggedUser"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullUser"
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "User"
    put:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Update current user"
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/user"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullUser"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "User"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Delete current user"
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "User"
# USERS - WEIGHTINGS
  /user/current/weightings:
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve current user weightings"
      operationId: "findWeightings"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/weightingOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Weightings"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Weighting"
    post:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Create current user weighting"
      operationId: "addWeighting"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/weighting"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/FullWeighting"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Weighting"
  /user/current/weightings/{weightingId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve current user weighting"
      operationId: "findSingleWeighting"
      produces:
        - "application/json"
      parameters:
       - $ref: "#/parameters/weightingId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Weighting"
    put:
      security:
        - bearerAuth: []
      tags:

        - "users"
      summary: "Update user weighting"
      operationId: "updateWeighting"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - $ref: "#/parameters/weightingId"
      - $ref: "#/parameters/weighting"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Weighting"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Delete user weighting"
      operationId: "deleteWeighting"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/weightingId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Weighting"
# USERS - ROUTINES
  /user/current/routines/:
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve current user routines"
      operationId: "findCurrentUserRoutines"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/difficulty"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/routineOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Routines"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Routine"
  /user/{userId}/routines/:
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve user routines"
      operationId: "findUserRoutines"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/userId"
        - $ref: "#/parameters/difficulty"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/routineOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Routines"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Routine"
# USERS - ROUTINES - FAVOURITES
  /user/current/routines/favourites:
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve current user favourite routines"
      operationId: "favRoutines"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/routineOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Favourites"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Favourites"
  /user/current/routines/{routineId}/favourites:
    post:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Mark current user routine as favourite"
      operationId: "favRoutine"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Favourites"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Unmark current user routine as favourite"
      operationId: "unfavRoutine"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Favourites"
# USERS - ROUTINES - EXECUTIONS
  /user/current/routines/executions:
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve current user routine executions"
      operationId: "findExecutionsForUser"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/executionOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Executions"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Execution"
# USERS - ROUTINES - RATINGS
  /user/current/routines/ratings:
    get:
      security:
        - bearerAuth: []
      tags:
        - "users"
      summary: "Retrieve current user routine ratings"
      operationId: "findRatingsForUser"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/ratingOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Ratings"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Rating"
# CATEGORIES
  /categories:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - "categories"
      summary: "Retrieve categories"
      operationId: "findCategories"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/categoryOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Categories"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Category"
    post:
      security:
        - bearerAuth: []
      tags:
        - "categories"
      summary: "Create category"
      operationId: "addCategory"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/category"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/FullCategory"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Category"
  /categories/{categoryId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "categories"
      summary: "Retrieve category"
      operationId: "getCategory"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/categoryId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullCategory"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Category"
    put:
      security:
        - bearerAuth: []
      tags:
        - "categories"
      summary: "Update category"
      operationId: "updateCategory"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/categoryId"
        - $ref: "#/parameters/category"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullCategory"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Category"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "categories"
      summary: "Delete category"
      operationId: "deleteCategory"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/categoryId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Category"
# SPORTS
  /sports:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - "sports"
      summary: "Retrieve sports"
      operationId: "findSports"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/sportOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
              $ref: "#/definitions/Sports"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Sport"
    post:
      security:
      - bearerAuth: []
      tags:
      - "sports"
      summary: "Create sport"
      operationId: "addSport"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - $ref: "#/parameters/sport"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/FullSport"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Sport"
  /sports/{sportId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "sports"
      summary: "Retrieve sport"
      operationId: "getSport"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/sportId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullSport"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Sport"
    put:
      security:
        - bearerAuth: []
      tags:
        - "sports"
      summary: "Update sport"
      operationId: "updateSport"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/sportId"
        - $ref: "#/parameters/sport"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullSport"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Sport"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "sports"
      summary: "Delete sport"
      operationId: "deleteSport"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/sportId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Sport"
# ROUTINES
  /routines:
    get:
      security:
        - bearerAuth: []
      tags:
        - "routines"
      summary: "Retrieve routines"
      operationId: "findRoutines"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/difficulty"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/routineOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Routines"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Routine"
    post:
       security:
        - bearerAuth: []
       tags:
        - "routines"
       summary: "Create routine"
       operationId: "addRoutine"
       consumes:
        - "application/json"
       produces:
        - "application/json"
       parameters:
         - $ref: "#/parameters/routine"
       responses:
         "201":
           description: "Created"
           schema:
             $ref: "#/definitions/FullRoutine"
         "400":
           $ref: '#/responses/BadRequest'
         "401":
           $ref: '#/responses/Unauthorized'
         "500":
           $ref: '#/responses/Unexpected'
       x-swagger-router-controller: "Routine"
  /routines/{routineId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "routines"
      summary: "Retrieve routine"
      operationId: "getRoutine"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullRoutine"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Routine"
    put:
      security:
        - bearerAuth: []
      tags:
        - "routines"
      summary: "Update routine"
      operationId: "updateRoutine"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/routine"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullRoutine"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Routine"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "routines"
      summary: "Delete routine"
      operationId: "deleteRoutine"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Routine"
# ROUTINES - CYCLES
  /routines/{routineId}/cycles:
    get:
      security:
        - bearerAuth: []
      tags:
        - "cycles"
      summary: "Retrieve routine cycles"
      operationId: "findCycles"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/cycleOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Cycles"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Cycle"
    post:
      security:
        - bearerAuth: []
      tags:
        - "cycles"
      summary: "Create routine cycle"
      operationId: "addCycle"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycle"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/FullCycle"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Cycle"
  /routines/{routineId}/cycles/{cycleId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "cycles"
      summary: "Retrieve routine cycle"
      operationId: "findSingleCycle"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullCycle"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Cycle"
    put:
      security:
        - bearerAuth: []
      tags:
        - "cycles"
      summary: "Update routine cycle"
      operationId: "updateCycle"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/cycle"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Cycle"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Cycle"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "cycles"
      summary: "Delete routine cycle"
      operationId: "deleteCycle"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Cycle"
# ROUTINES - CYCLES - EXERCISES
  /routines/{routineId}/cycles/{cycleId}/exercises:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - "exercises"
      summary: "Retrieve routine cycle exercises"
      operationId: "findExercises"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/exerciseOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Exercises"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Exercise"
    post:
      security:
        - bearerAuth: []
      tags:
        - "exercises"
      summary: "Create routine cycle exercise"
      operationId: "addExercise"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exercise"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/FullExercise"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Exercise"
  /routines/{routineId}/cycles/{cycleId}/exercises/{exerciseId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "exercises"
      summary: "Retrieve routine cycle exercise"
      operationId: "findSingleExercise"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullExercise"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Exercise"
    put:
      security:
        - bearerAuth: []
      tags:
        - "exercises"
      summary: "Update routine cycle exercise"
      operationId: "updateExercise"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/exercise"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullExercise"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Exercise"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "exercises"
      summary: "Delete routine cycle exercise"
      operationId: "deleteExercise"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Exercise"
# ROUTINES - CYCLES - EXERCISES - IMAGES
  /routines/{routineId}/cycles/{cycleId}/exercises/{exerciseId}/images:
    get:
      security:
        - bearerAuth: []
      tags:
        - "images"
      summary: "Retrieve routine cycle exercise images"
      operationId: "findExerciseImages"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/imageOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Images"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Image"
    post:
      security:
        - bearerAuth: []
      tags:
        - "images"
      summary: "Create routine cycle exercise image"
      operationId: "addExerciseImage"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/image"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/FullImage"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Image"
  /routines/{routineId}/cycles/{cycleId}/exercises/{exerciseId}/images/{imageId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "images"
      summary: "Retrieve routine cycle exercise image"
      operationId: "findSingleExerciseImage"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/imageId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullImage"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Image"
    put:
      security:
      - bearerAuth: []
      tags:
      - "images"
      summary: "Update routine cycle exercise image"
      operationId: "updateExerciseImage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/imageId"
        - $ref: "#/parameters/image"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullImage"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Image"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "images"
      summary: "Delete routine cycle exercise image"
      operationId: "deleteExerciseImage"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/imageId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Image"
# ROUTINES - CYCLES - EXERCISES - VIDEOS
  /routines/{routineId}/cycles/{cycleId}/exercises/{exerciseId}/videos:
    get:
      security:
        - bearerAuth: []
      tags:
        - "videos"
      summary: "Retrieve routine cycle exercise videos"
      operationId: "findExerciseVideos"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/videoOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Videos"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Video"
    post:
      security:
        - bearerAuth: []
      tags:
        - "videos"
      summary: "Create routine cycle exercise video"
      operationId: "addExerciseVideo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/video"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/FullVideo"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Video"
  /routines/{routineId}/cycles/{cycleId}/exercises/{exerciseId}/videos/{videoId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - "videos"
      summary: "Retrieve routine cycle exercise video"
      operationId: "findSingleExerciseVideo"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/videoId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullVideo"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Video"
    put:
      security:
        - bearerAuth: []
      tags:
        - "videos"
      summary: "Update routine cycle exercise video"
      operationId: "updateExerciseVideo"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/videoId"
        - $ref: "#/parameters/video"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FullVideo"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Video"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "videos"
      summary: "Delete routine cycle exercise video"
      operationId: "deleteExerciseVideo"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/cycleId"
        - $ref: "#/parameters/exerciseId"
        - $ref: "#/parameters/videoId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Video"
# ROUTINES - SPORTS
  /routines/{routineId}/sport:
    get:
      security:
        - bearerAuth: []
      tags:
        - "routines"
      summary: "Retrieve routine sports"
      operationId: "getRoutineSports"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/sportOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/Sports'
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Routine"
  /routines/{routineId}/sport/{sportId}:
    post:
      security:
        - bearerAuth: []
      tags:
        - "routines"
      summary: "Create routine sport"
      operationId: "associateRoutineSport"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/sportId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Routine"
    delete:
      security:
        - bearerAuth: []
      tags:
        - "routines"
        - "sports"
      summary: "Delete routine sport"
      operationId: "dissociateRoutineSport"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/sportId"
      responses:
        "200":
          description: "OK"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Routine"
# ROUTINES - EXECUTIONS
  /routines/{routineId}/executions:
    get:
      security:
        - bearerAuth: []
      tags:
        - "executions"
        - "routines"
      summary: "Retrieve routine executions"
      operationId: "findExecutions"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/executionOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Executions"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Execution"
    post:
      security:
        - bearerAuth: []
      tags:
        - "executions"
        - "routines"
      summary: "Create routine execution"
      operationId: "addExecution"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/execution"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/FullExecution"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Execution"
# ROUTINES - RATINGS
  /routines/{routineId}/ratings:
    get:
      security:
        - bearerAuth: []
      tags:
        - "ratings"
        - "routines"
      summary: "Retrieve routine ratings"
      operationId: "findRatings"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/ratingOrderBy"
        - $ref: "#/parameters/direction"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Ratings"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Rating"
    post:
      security:
        - bearerAuth: []
      tags:
        - "ratings"
        - "routines"
      summary: "Create routine rating"
      operationId: "addRating"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: "#/parameters/routineId"
        - $ref: "#/parameters/rating"
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/FullRating"
        "400":
          $ref: '#/responses/BadRequest'
        "401":
          $ref: '#/responses/Unauthorized'
        "404":
          $ref: '#/responses/NotFound'
        "500":
          $ref: '#/responses/Unexpected'
      x-swagger-router-controller: "Rating"
responses:
  BadRequest:
    description: "Bad Request: Request or data is invalid or has a constraint"
  Unauthorized:
    description: "Unauthorized: Authorization information is missing or invalid"
  NotFound:
    description: "Not Found: Data not found"
  Unexpected:
    description: "Internal Server Error: Unexpected error"
definitions:
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      description:
        type: "string"
      details:
        type: "array"
        items:
          type: "object"
          properties:
            message:
              type: "string"
  # USER
  FullUser:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        maxLength: 50
      fullName:
        type: "string"
        maxLength: 100
      gender:
        type: "string"
        enum:
          - "male"
          - "female"
          - "other"
      birthdate:
        type: "integer"
        format: "int64"
      email:
        type: "string"
        format: "email"
        maxLength: 100
      avatarUrl:
        type: "string"
        format: "uri"
        maxLength: 255
      phone:
        type: "string"
        maxLength: 50
      dateCreated:
        type: "integer"
        format: "int64"
      dateLastActive:
        type: "integer"
        format: "int64"
      deleted:
        type: "boolean"
      verified:
        type: "boolean"
    example:
      id: 1
      username: "johndoe"
      fullName: "John Doe"
      gender: "male"
      birthdate: 284007600000
      email: "johndoe@email.com"
      phone: "98295822"
      avatarUrl: "https://flic.kr/p/3ntH2u"
      dateCreated: 1602139940660
      dateLastActive: 1602483829035
      deleted: false
      verified: true
  User:
    type: "object"
    properties:
      username:
        type: "string"
        maxLength: 50
      password:
        type: "string"
        maxLength: 50
      fullName:
        type: "string"
        maxLength: 100
      email:
        type: "string"
        format: "email"
        maxLength: 100
      birthdate:
        type: "integer"
        format: "int64"
      avatarUrl:
        type: "string"
        format: "uri"
        maxLength: 255
      phone:
        type: "string"
        maxLength: 50
      gender:
        type: "string"
        enum:
          - "male"
          - "female"
          - "other"
    required:
      - username
      - password
      - fullName
      - email
      - birthdate
      - gender
    example:
      username: "johndoe"
      password: "1234567890"
      fullName: "John Doe"
      gender: "male"
      birthdate: 284007600000
      email: "johndoe@email.com"
      phone: "98295822"
      avatarUrl: "https://flic.kr/p/3ntH2u"
  PublicUser:
    type: "object"
    properties:
      username:
        type: "string"
        maxLength: 50
      gender:
        type: "string"
        enum:
          - "male"
          - "female"
          - "other"
      avatarUrl:
        type: "string"
        format: "uri"
        maxLength: 255
      dateCreated:
        type: "integer"
        format: "int64"
      dateLastActive:
        type: "integer"
        format: "int64"
    example:
      username: "johndoe"
      gender: "male"
      avatarUrl: "https://flic.kr/p/3ntH2u"
      dateCreated: 1602139940660
      dateLastActive: 1602483829035
  AuthenticationToken:
    type: "object"
    properties:
      token:
        type: "string"
    required:
      - token
    example:
      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjMsImlhdCI6MTYwMjU2Mjc3MTM4NiwiZXhwIjoxNjAyNTY1MzYzMzg2fQ.ilDzvJ1b77Vyi40g3Sy5mo5iyDj3T6MOhCHsH6jEfDk"
  EmailConfirmation:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
        maxLength: 100
      code:
        type: "string"
        maxLength: 10
    required:
      - email
      - code
    example:
      email: "johndoe@email.com"
      code: "F429F5"
  EmailResend:
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
        maxLength: 100
    required:
      - email
    example:
      email: "johndoe@email.com"
  Credentials:
    type: "object"
    properties:
      username:
        type: "string"
        maxLength: 50
      password:
        type: "string"
        maxLength: 50
    required:
      - username
      - password
    example:
      username: "johndoe"
      password: "1234567890"
  # WEIGHTING
  FullWeighting:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      date:
        type: "integer"
        format: "int64"
      weight:
        type: "number"
        format: "float"
        minimum: 0.1
        maximum: 500
      height:
        type: "number"
        format: "float"
        minimum: 0.1
        maximum: 3
    example:
      id: 1
      date: 1602483829035
      weight: 86.3
      height: 1.85
  Weighting:
    type: "object"
    properties:
      weight:
        type: "number"
        format: "float"
        minimum: 0.1
        maximum: 500
      height:
        type: "number"
        format: "float"
        minimum: 0.1
        maximum: 3
    required:
      - weight
      - height
    example:
      weight: 86.3
      height: 1.85
  Weightings:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullWeighting"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          date: 1602483829035,
          weight: 86.3,
          height: 1.85
        }
      ]
      size: 10
      page: 0
      isLastPage: true
  # ROUTINE
  FullRoutine:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        maxLength: 100
      detail:
        type: "string"
        maxLength: 200
      dateCreated:
        type: "integer"
        format: "int64"
      averageRating:
        type: "number"
        format: "float"
      isPublic:
        type: "boolean"
      difficulty:
        type: "string"
        enum:
          - "rookie"
          - "beginner"
          - "intermediate"
          - "advanced"
          - "expert"
      category:
        $ref: "#/definitions/FullCategory"
      creator:
        $ref: "#/definitions/PublicUser"
    example:
      id: 1
      name: "7 x 4 Challenge"
      detail: "Full Body 7 x 4 Challenge"
      dateCreated: 1602646871112
      averageRating: 5
      isPublic: true
      difficulty: "rookie"
      creator:
        id: 3
        username: "johndoe7"
        gender: "male"
        avatarUrl: "https://flic.kr/p/3ntH2u"
        dateCreated: 1602139940660
        dateLastActive: 1602646870971
      category:
        id: 1
        name: "Full Body"
        detail: "Full Body"
  Routine:
    type: "object"
    properties:
      name:
        type: "string"
        maxLength: 100
      detail:
        type: "string"
        maxLength: 200
      dateCreated:
        type: "integer"
        format: "int64"
      averageRating:
        type: "number"
        format: "float"
      isPublic:
        type: "boolean"
      category:
        type: object
        properties:
          id:
            type: "integer"
            format: "int64"
      difficulty:
        type: "string"
        enum:
        - "rookie"
        - "beginner"
        - "intermediate"
        - "advanced"
        - "expert"
    required:
      - name
      - detail
      - isPublic
      - category
      - difficulty
    example:
      name: "7 x 4 Challenge"
      detail: "Full Body 7 x 4 Challenge"
      isPublic: true
      difficulty: "rookie"
      category:
        id: 1
  Routines:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullRoutine"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          name: "7 x 4 Challenge",
          detail: "Full Body 7 x 4 Challenge",
          dateCreated: 1602646871112,
          averageRating: 0,
          isPublic: true,
          difficulty: "rookie",
          creator: {
            id: 3,
            username: johndoe7,
            gender": male,
            avatarUrl: https://flic.kr/p/3ntH2u",
            dateCreated: 1602139940660,
            dateLastActive: 1602710772470
          },
          category: {
            id: 1,
            name: "Full Body",
            detail: null
          }
        }
      ]
      size: 10
      page: 0
      isLastPage: true
  # CYCLE
  FullCycle:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        maxLength: 100
      detail:
        type: "string"
        maxLength: 200
      type:
        type: "string"
        enum:
          - "warmup"
          - "exercise"
          - "cooldown"
      order:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 99
      repetitions:
        type: "integer"
        format: "int64"
        minimum: 1
        maximum: 999
    example:
      id: 1
      name: "Fast Warmup"
      detail: "Fast Warmup"
      type: "warmup"
      order: 1
      repetitions: 1
  Cycle:
    type: "object"
    properties:
      name:
        type: "string"
        maxLength: 100
      detail:
        type: "string"
        maxLength: 200
      type:
        type: "string"
        enum:
        - "warmup"
        - "exercise"
        - "cooldown"
      order:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 99
      repetitions:
        type: "integer"
        format: "int64"
        minimum: 1
        maximum: 999
    required:
      - name
      - detail
      - repetitions
      - order
      - type
    example:
      name: "Fast Warmup"
      detail: "Fast Warmup"
      type: "warmup"
      order: 1
      repetitions: 1
  Cycles:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullCycle"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          name: "Fast Warmup",
          detail: "Fast Warmup",
          type: "warmup",
          order: 1,
          repetitions: 1
        }
      ]
      size: 10
      page: 0
      isLastPage: true
  # EXERCISE
  FullExercise:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        maxLength: 100
      detail:
        type: "string"
        maxLength: 200
      type:
        type: "string"
        enum:
          - "exercise"
          - "rest"
      duration:
        type: "integer"
        format: "int32"
      repetitions:
        type: "integer"
        format: "int32"
      order:
        type: "integer"
        format: "int32"
    example:
      id: 1
      name: "Jumping Jacks"
      detail: "Jumping Jacks"
      type: "exercise"
      duration: 30
      repetitions: 0
      order: 1
  Exercise:
    type: "object"
    properties:
      name:
        type: "string"
        maxLength: 100
      detail:
        type: "string"
        maxLength: 200
      type:
        type: "string"
        enum:
          - "exercise"
          - "rest"
      duration:
        type: "integer"
        format: "int32"
        minimum: 0
      repetitions:
        type: "integer"
        format: "int32"
        minimum: 0
    required:
        - name
        - detail
        - type
        - duration
        - repetitions
    example:
      name: "Jumping Jacks"
      detail: "Jumping Jacks"
      type: "exercise"
      duration: 30
      repetitions: 0
  Exercises:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullExercise"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          name: "Jumping Jacks",
          detail: "Jumping Jacks",
          type: "exercise",
          duration: 30,
          repetitions: 0,
          order: 1
        }
      ]
      size: 10
      page: 0
      isLastPage: true
  # IMAGE
  FullImage:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      number:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 999
      url:
        type: "string"
        format: "uri"
        maxLength: 255
    example:
      id: 1
      number: 1
      url: "https://flic.kr/p/23K29gx"
  Image:
    type: "object"
    properties:
      number:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 999
      url:
        type: "string"
        format: "uri"
        maxLength: 255
    required:
      - number
      - url
    example:
      number: 1
      url: "https://flic.kr/p/23K29gx"
  Images:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullImage"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          number: 1,
          url: "https://flic.kr/p/23K29gx"
        }
      ]
      size: 10
      page: 0
      isLastPage: true
  # VIDEO
  FullVideo:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      number:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 999
      url:
        type: "string"
        format: "uri"
        maxLength: 255
    example:
      id: 1
      number: 1
      url: "https://www.youtube.com/watch?v=XYZ"
  Video:
    type: "object"
    properties:
      number:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 999
      url:
        type: "string"
        format: "uri"
        maxLength: 255
    required:
      - number
      - url
    example:
      number: 1
      url: "https://www.youtube.com/watch?v=XYZ"
  Videos:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullVideo"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          number: 1,
          url: "https://www.youtube.com/watch?v=XYZ"
        }
      ]
      size: 10
      page: 0
      isLastPage: true
  # CATEGORY
  FullCategory:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        maxLength: 100
      detail:
        type: "string"
        maxLength: 200
    example:
      id: 1
      name: "Full Body"
      detail: "Full Body"
  Category:
    type: "object"
    properties:
      name:
        type: "string"
        maxLength: 100
      detail:
        type: "string"
        maxLength: 200
    required:
      - name
    example:
      name: "Full Body"
      detail: "Full Body"
  Categories:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullCategory"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          name: "Full Body",
          detail: "Full Body"
        }
      ]
      size: 10
      page: 0
      isLastPage: true
  # SPORT
  FullSport:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        maxLength: 100
      detail:
        type: "string"
        maxLength: 200
    example:
      id: 1
      name: "Tennis"
      detail: "Tennis"
  Sport:
    type: "object"
    properties:
      name:
        type: "string"
        maxLength: 100
      detail:
        type: "string"
        maxLength: 200
    required:
      - name
    example:
      name: "Tennis"
      detail: "Tennis"
  Sports:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullSport"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          name: "Tennis",
          detail: "Tennis"
        }
      ]
      size: 10
      page: 0
      isLastPage: true
  # EXECUTION
  FullExecution:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      date:
        type: "integer"
        format: "int64"
      duration:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 9999
      wasModified:
        type: "boolean"
      routine:
        $ref: "#/definitions/FullRoutine"
    example:
      id: 1
      date: 1602732549345
      duration: 25
      wasModified: false
      routine: {
        id: 1,
        name: "7 x 4 Challenge",
        detail: "Full Body 7 x 4 Challenge",
        dateCreated: 1602646871112,
        averageRating: 0,
        isPublic: true,
        difficulty: "rookie",
        creator: {
          id: 3,
          username: "johndoe",
          gender: "male",
          avatarUrl: "https://flic.kr/p/3ntH2u",
          dateCreated: 1602139940660,
          dateLastActive: 1602732549243
        },
        category: {
          id: 1,
          name: "Full Body",
          detail: "Full Body"
        }
      }
  Execution:
    type: "object"
    properties:
      duration:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 9999
      wasModified:
        type: "boolean"
    required:
      - duration
      - wasModified
    example:
      duration: 25
      wasModified: false
  Executions:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullExecution"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          date: 1602732549345,
          duration: 25,
          wasModified: false,
          routine: {
            id: 1,
            name: "7 x 4 Challenge",
            detail: "Full Body 7 x 4 Challenge",
            dateCreated: 1602646871112,
            averageRating: 0,
            isPublic: true,
            difficulty: "rookie",
            creator: {
              id: 3,
              username: "johndoe",
              gender: "male",
              avatarUrl: "https://flic.kr/p/3ntH2u",
              dateCreated: 1602139940660,
              dateLastActive: 1602732549243
            },
            category: {
              id: 1,
              name: "Full Body",
              detail: "Full Body"
            }
          }
        }
      ]
      size: 10
      page: 0
      isLastPage: true
  # RATING
  FullRating:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      date:
        type: "integer"
        format: "int64"
      score:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 10
      review:
        type: "string"
        maxLength: 200
      routine:
        $ref: "#/definitions/FullRoutine"
    example:
      id: 1
      date: 1602139940660
      score: 10
      review: "Best routine ever!!!"
      routine: {
        id: 1,
        name: "7 x 4 Challenge",
        detail: "Full Body 7 x 4 Challenge",
        dateCreated: 1602646871112,
        averageRating: 0,
        isPublic: true,
        difficulty: "rookie",
        creator: {
          id: 3,
          username: "johndoe",
          gender: "male",
          avatarUrl: "https://flic.kr/p/3ntH2u",
          dateCreated: 1602139940660,
          dateLastActive: 1602732549243
        },
        category: {
          id: 1,
          name: "Full Body",
          detail: "Full Body"
        }
      }
  Rating:
    type: "object"
    properties:
      score:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 10
      review:
        type: "string"
        maxLength: 200
    required:
        - score
        - review
    example:
      score: 10
      review: "Best routine ever!!!"
  Ratings:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullRating"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          date: 1602732549345,
          score: 10,
          review: "Best routine ever!!!",
          routine: {
            id: 1,
            name: "7 x 4 Challenge",
            detail: "Full Body 7 x 4 Challenge",
            dateCreated: 1602646871112,
            averageRating: 0,
            isPublic: true,
            difficulty: "rookie",
            creator: {
              id: 3,
              username: "johndoe",
              gender: "male",
              avatarUrl: "https://flic.kr/p/3ntH2u",
              dateCreated: 1602139940660,
              dateLastActive: 1602732549243
            },
            category: {
              id: 1,
              name: "Full Body",
              detail: "Full Body"
            }
          }
        }
      ]
      size: 10
      page: 0
      isLastPage: true
  # FAVOURITES
  Favourites:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int64"
      orderBy:
        type: "string"
      direction:
        type: "string"
        enum: [ "asc", "desc" ]
      results:
        type: "array"
        items:
          $ref: "#/definitions/FullRoutine"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      isLastPage:
        type: "boolean"
    example:
      totalCount: 1
      orderBy: "id"
      direction: "asc"
      results: [
        {
          id: 1,
          name: "7 x 4 Challenge",
          detail: "Full Body 7 x 4 Challenge",
          dateCreated: 1602646871112,
          averageRating: 0,
          isPublic: true,
          difficulty: "rookie",
          creator: {
            id: 3,
            username: "johndoe",
            gender: "male",
            avatarUrl: "https://flic.kr/p/3ntH2u",
            dateCreated: 1602139940660,
            dateLastActive: 1602732549243
          },
          category: {
            id: 1,
            name: "Full Body",
            detail: "Full Body"
          }
        }
      ]
      size: 10
      page: 0
      isLastPage: true
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
